<html><!-- InstanceBegin template="/Templates/MainTemplate.dwt" codeOutsideHTMLIsLocked="false" -->
<head>
<!-- #BeginEditable "doctitle" -->
<title>Jdon Framework</title>  
<!-- #EndEditable -->
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

<link rel="shortcut icon" href="http://www.jdon.com/favicon.ico">
<!-- InstanceBeginEditable name="head" -->

-->
</style>
<!-- InstanceEndEditable -->
<link href="views.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#dddddd" text="#000000">
 <table width="100%" border="0" cellspacing="0" cellpadding="0" align="center">

  <tr> 
    <td height="11" colspan="7" bgcolor="#FFFFFF" class="bianxian"> 
      <table width="100%" border="0" cellspacing="0" cellpadding="0" height="1" bordercolor="#000000">
        <tr> 
          <td> 
            <table width="100%" border="0" cellspacing="0" cellpadding="0" height="2" bgcolor="#000000">
              <tr> 
                <td></td>
              </tr>
            </table>
          </td>
        </tr>
      </table>
    </td>
  </tr>
  <tr> 
    
    <td bgcolor="#FFFFFF"  valign="top">
<table width="100%" border="0" cellspacing="0" cellpadding="0">
        <tr> 
          
         
          <td valign="top" > 
            <table width="100%" border="0" cellspacing="2" cellpadding="2">
              <tr>
                <td>
                  <h1>JDon.org</h1>
				<!-- #BeginEditable "main" --> 
                  <h1 align="center">JdonFramework Architecture </h1>
                 
                    <p>JdonFramework  is a light-weight framework for developing DDD applications.                  </p>
                    <p>Before the  DDD,the business logic was implemented by the technical component ,such as  service,action and so on,and the model objects were all anaemia,they are just  the data collections,using this design style,it is that the technical  components drive the anaemia models to complete the business logics.this style  has a professional name called &quot;Transaction script&quot;.</p>
                    <p>                      After using the DDD,the design style is  completely different from the traditional style.Using DDD style,it is the  domain models drive the technical components to finish the business logics,as  such,our software system is full focus on the Business domain model,it is easy  to understand ,extend and maintain,at the same time,the domain model also makes  our software systems more scalable,and be better performance.</p>
                    <h2>DDD-Oriented Architecture</h2>
                    <p>In order to better highlight on the  business domain,Jdonframework take the DDD as the core design ideas,and divide  the application structure into two parts: the technical components and the  domain models.</p>
                    <h2>The  Domain models</h2>
                    <p> The domain models  mainly contains the Entity,Value  Object,Aggregate and the domain service,all of these are mainly focus on the  business domain,it is nothing to do with the concrete technical  implementation.In addition ,these domain models are marked with the @Model  annotation.</p>
                    <p><br>
                      The domain models is the core of our  software systems,their lifecycles management is very important,Jdonframework makes  the management of domain model's lifecycles more easily,the domain models lives  in the cache ,such as ehcache,oscache,terracotta ....,as this,the software  system will be more scalable with the distributed cache system ,such as  terracotta ,memcached.....</p>
                    <p><br>
                      However,cache is a very low-level  technical support tool,if we allow the developers to manually interact with  cache,then it will easily lead to errors and inconsistecies,so Jdonframework  integrates two interceptors ,one is &quot;CacheInterceptor&quot; ,the other is &quot;DomainCacheInterceptor&quot;,they  both are configured in the &quot;aspect.xml&quot; file which is a config file  of jdonframework.</p>
                    <p><br>
                      First let's see  &quot;CacheInterceptor&quot;,&quot;CacheIntercep&quot;  is between the presentation layer and  business layer,when the presentation action invoke the &quot;get*()&quot; method  of business service,the CacheInterceptor will intercept the invocation,it first  checks  that whether the domain model  object already is the cache,if the model object is not in  cache,CacheInterceptor will invoke the next interceptor which is in the interceptor  chain,and finally the model object will be fetched from persistence  datasource,the CacheInterceptor will gain the fetched model object and put it  into the cache.</p>
                    <p><br>
                      I guess you have understood how the  CacheInterceptor works,now i will introduce you how the DomainCacheInteceptor  works.DomainCacheInterceptor is between business layer and the persistence  layer,before the business layer invoking the persistence layer component to  fetch the model,the DomainCacheInterceptor will intercept the invocation,it  will also check that whether the model has already in the cache,if  in,DomainCacheInterceptor just return the cached Model,or else  it will put the model which is retrieved from  persistence datasource into the cache.</p>
                    <p><br>
                      Last let me see the followed diagram,the  diagram describes the relation of the two interceptors. </p>
                    <p>&nbsp;</p>
                    <p><img src="images/6.2.model.cache.arch.png" alt="aa" width="651" height="364"> </p>
                    <p>&nbsp;</p>
                    <h2>The architecture components</h2>
                    <p>The technical components  mainly involves the technical function  components,these components are marked with the @Component annotation.</p>
                    <p><br>
                      The technical component's lifecycles  management is also important,Jdonframework use the IOC container to manage the  lifecycles of technical components,at the same time,the IOC container is also  holded in the context container such as the ServeltContext.</p>
                    <p>As mentioned above,Jdonframework divides the  application structure into two parts:Domain models and the technical components  ,the domain models lives in the cache ,and the technical components lives in  the IOC container,Jdonframework uses the interceptors to inject the technical  components into the domain models.Using the Jdonframework,it will drive you to  develop your application with the OO style,what's more,in this style,The domain  models drive the components to finish the business operations,so do you smell  the flavor of DDD ?</p>
                    <h2>Domain Events support</h2>
                    <p>As the DDD framework,it is essential  to solve the interaction between the domain  model and the technical component,Jdonframework apply the domain event pattern  to make the domain models less coupling with technical components.the core architecture  diagram as the followed here:</p>
                    <p><img src="images/6.2.1.png" width="642" height="381"> </p>
                    <p>As the above diagram description,when  domain models trigger some domain events,the domain event will generate proper  domain message,at last the messageListener will treat with the event,and assist  with the business logic.</p>
                    <p><br>
                      If you want to use Domain event ,you  just need to use three Annotations,@Introduce,@Inject and @Send.for example,we  have a model class named MyModel,and a domain event named MyDomainEvent ,the  code is as here:</p>
                    <table width="90%" border="0" bgcolor="#CCCCCC">
                      <tr>
                        <td><p>@Model <br>
                              <strong>public</strong> <strong>class</strong> MyModel { </p>
                          <p> &nbsp;&nbsp;&nbsp;<strong>private</strong> Long id; <br>
                            <strong>&nbsp;&nbsp;&nbsp;private</strong> String name; </p>
                          <p>&nbsp;&nbsp;&nbsp;@Inject <br>
                            <strong>&nbsp;&nbsp;&nbsp;private</strong> MyModelDomainEvent myModelDomainEvent; </p>
                          <p>&nbsp;&nbsp;&nbsp;@Inject <br>
                            <strong>&nbsp;&nbsp;&nbsp;private</strong> MyModelService myModelServiceCommand; </p>
                          <p>&nbsp;&nbsp;&nbsp;<strong>public</strong> Long getId() { <br>
                            <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return</strong> id;    <br>
                            &nbsp;&nbsp;&nbsp;} </p>
                          <p>&nbsp;&nbsp;&nbsp;<strong>public</strong> <strong>void</strong> setId(Long id) { <br>
                            <strong>&nbsp;&nbsp;&nbsp; this</strong>.id = id; <br>
                               } </p>
                          <p>&nbsp;&nbsp;&nbsp;<strong>public</strong> String getName() { <br>
                            <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if</strong> (<strong>this</strong>.name == <strong>null</strong>) { </p>
                          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//this is async method, can be splite twice times calling. <br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EventMessage message = myModelDomainEvent.asyncFindName(<strong>this</strong>); <br>
                            <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this</strong>.name = (String)  message.getEventResult(); <br>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}  <br>
                            <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return</strong> name; <br>
                            } </p>
                          <p>…… <br>
                          }</p>
                          <p>@Introduce(&quot;message&quot;) <br>
                              <strong>public</strong> <strong>class</strong> MyModelDomainEvent { </p>
                          <p>&nbsp;&nbsp;&nbsp;@Send(value=&quot;MyModel.findName&quot;,asyn=<strong>true</strong>) <br>
                            <strong>&nbsp;&nbsp;&nbsp;public</strong> DomainMessage asyncFindName(MyModel  myModel) { <br>
                            <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return</strong> <strong>new</strong> DomainMessage(myModel); <br>
                               } </p>
                        <p>}</p></td>
                      </tr>
                    </table>
                    <p>When you retrieve MyModel from service  or repository,the CacheInterceptor and the DomainCacheInterceptor will inject  the MyModelDomainEvent and MyModelService into MyModel,when injecting the  MyModelDomainEvent,@Introduce(&quot;message&quot;) will  lead MyModelDomainEvent to be enhanced with  MessageInterceptor,when myModel.getName() is invoked, the MessageListenner will  intercept the invocation,it will choose proper means to drive the  MessageListner to response this event request.</p>
                    <p>another domain events sample : </p>
                    <p><img src="images/domain_events.gif" alt="s" width="502" height="600"></p>
                    <h2>Aop support</h2>
                    <p>Using the  DDD,It is the domain models drive the  technical components to finish the business logics,and in this design style,the  components are just the assistants,which assist the domain models to complete  the business operations.So how the domain models gain the needed  components,Jdonframework use the @Inject and @Component to inject components  and the domain events into models.<br>
                      </p>
                    <p>As the followed diagram illustrates  ,when client invoke the getA(&quot;a&quot;),if Model A with a Introduce,the A  will be enhanced,and the technical component C will also be injected  into the A ,at the same time,when inject the  B,the B will also be enhanced for the @Introduce.</p>
                    <p><img src="images/6.2.model.png" width="704" height="396"></p>
                    <p>&nbsp;</p>
                    <h2>More Details </h2>
                    <P>Jdon is a RAD tool for writing a
                      small/medium stand-alone JavaEE application. it is a  IOC/AOP
                      framework too, and includes a lightweight Ioc container
                      based on Picocontainer.the feature of Jdon is that all components
                      are replaceable, even includes the framework itself. you
                      can plug in any java objects, Jdon is a embeddable framework. </P>
                    <p>Jdon provides  Domain Driven Development  for data CRUD
                      and batch inquiry (master-details)</p>
                    <p>Jdon is similar with Rubby +  lightweight container,
                      and really simplifies JavaEE development! It can produce
                      high quality
                      applications, faster and at lower cost.</p>
                    <p>By using cache Jdon optimizes the components running performance,
                      such as the dynamic proxy components. Because of the cache optimization, Jdon potentially improves
                      the application system performance, such as batch inquiry
                      operations. The performance of  the JPetstore with Jdon is best among several JPetstores (including iBATIS JPetstore/Spring JPetstore) </p>
                    <p>Jdon seamlessly supports two services: POJO/EJB , it helps
                      you to build a  scalable and extendable small/medium
                      JavaEE system .<br>
                    </p>
                    <p><img src="images/architecture.gif" alt=" " width="400" height="310"></p>
                    <P><br>
                      Jdon give your JavaEE application a  complete quality solution:</P>
                    <P><strong>Ioc microkernel</strong>:<br>
                      The great thing about objects is they can be replaced.
                      ----Object-
                      Oriented Analysis and Design with Applications, Grady Booch,
                      one of the
                      founding fathers of object-oriented programming</P>
                    <P>The great thing about Jdon is it helps you replace them((even
                      you can replace jdon itself!).</P>
                    <P>All framework components
                      include framework infrastructure objects are be managed
                      by a micocontainer made by <a href="http://www.picocontainer.org/%20" target="_blank">Picocontainer</a>,
                      you can insert or change any components by change the
                      xml configuration files(such as container.xml/aspect.xml/jdonframework.xml),
                      you can also replace Jdon framework's infrastructure  components(this
                      is a strongpoint). </P>
                    <P>Jdon framework will make your components. the infrastructure
                      components or POJO services collaborate with each other
                      via <A href="ioc.html">dependency
                        injection</A>. </P>
                    <P>When you have hundreds of components/POJO services, Jdon's
                      autowiring function will take care of their invocation
                      relation.</P>
                    <P><strong>Interceptor</strong> : <br>
                      You can insert a Interceptor by XML files aspect.xml, Jdon
                      has some default interceptos, they are  pool interceptor/cache
                      interceptor/stateful interceptor.this interceptos will
                      active before target services are invoked.if you appont
                      a interceptor to a service, the service must implements
                      the interface the interceptor, such as Poolable or Stateful </P>
                    <P><strong>Service/Componet</strong>:<br>
                      When you want to develop a small system, you
                      can only use POJO services implement logic function. How to  get a service instance? two ways: Annotation or XML</P>
                    <P>First: Annotation:</P>
                    <P>&nbsp;</P>
                    <P>Second: XML </P>
                    <P>in jdonframework.xml (container.xml)
                      there is such service  configuration:</P>
                    <table width="100%"  border="0" cellpadding="1" cellspacing="0" bgcolor="#CCCCCC">
                      <tr>
                        <td><P>&lt;pojoService name=&quot;userDao&quot; class=&quot;news.container.UserJdbcDao&quot;&gt;</P>
                            <p>&lt;constructor value=&quot;java:/NewsDS&quot;/&gt;</p>
                          <p>&lt;/pojoService&gt;</p></td>
                      </tr>
                    </table>
                    <P>in code, we can get the service instance by below mode:</P>
                    <table width="100%"  border="0" cellpadding="1" cellspacing="0" bgcolor="#CCCCCC">
                      <tr>
                        <td> UserDao ud = (UserDao)WebAppUtil.getService(“userDao”,
                          request); </td>
                      </tr>
                    </table>
                    <P>Jdon defines four service models: component instance that
                      is singleton, service instance that can be pooled</P>
                    <P>about Choice with Annotaion and XML in Ioc container:XML in IoC containers:<a href="http://www.theserverside.com/news/thread.tss?thread_id=56989" target="_blank"> A Hell or A Realm? </a></P>
                    <P><strong>More Annotation</strong></P>
                    <P> @Poolable: get a instance from the class's  object pooing, <a href="http://michael-bien.com/mbien/entry/object_pooling_determinism_vs_throughput" target="_blank">Object Pooling - Determinism vs. Throughput</a><br>
                        <br>
                      @Stateful:its instance lifecycle is user session scope <br>
  <br>
                      @Singleton: get a singleton instance form the class </P>
                    <P><strong>RAD Tool</strong></P>
                    <P>Keep deliberately simple, yet still very powerful, so
                      that your code is kept simple.</P>
                    <P> Jdon  provides a fast development
                      way for model's CRUD(create/read/update/delete) , in presentation
                      layer, in general, you don't need any code, only configure MVC   Process  in
                      the jdonframework.xml:</P>
                    <table width="100%"  border="0" cellpadding="1" cellspacing="0" bgcolor="#CCCCCC">
                      <tr>
                        <td><pre > &lt;model key=&quot;userId&quot; <br>    class =&quot;com.jdon.framework.test.model.UserTest&quot;&gt;<br>      &lt;actionForm name=&quot;userActionForm&quot;/&gt;<br>      &lt;handler&gt;<br>        &lt;service ref=&quot;testService&quot;&gt; <br>          &lt;getMethod name=&quot;getUser&quot; /&gt;<br>          &lt;createMethod name=&quot;createUser&quot; /&gt;<br>          &lt;updateMethod name=&quot;updateUser&quot; /&gt;<br>          &lt;deleteMethod name=&quot;deleteUser&quot; /&gt;<br>        &lt;/service&gt;<br>      &lt;/handler&gt;<br>    &lt;/model&gt;</pre >                        </td>
                      </tr>
                    </table>
                    <P>Jdon's presentation layer is based Struts 1.2, so Jdon
                      will generate Action instance at running time.</P>
                    <P>Multi page query function can be accomplished quickly
                      by Jdon, Jdon provide the multi-page taglib,  JDBC template,
                      and Model's cache optimization.</P>
                    <P>Use Jdon, you can develop a small system in several minutes,
                      here is the system demo:<a href="http://www.jdon.com:8080/testWeb/" target="_blank">http://www.jdon.com:8080/testWeb/</a> </P>
                    <P>More details in <B><a href="doc.htm" target="_blank">Architecture Document</a></B> <a href="steps.html" target="_blank">Step by Step develop a Jdon application</a></P>
                    <h2>&nbsp;</h2>
                    <h2>&nbsp;</h2>
                    <h2><strong>Comparison with EJB2/EJB3/Spring 1.x/Jdon </strong></h2>
                    <table width="100%"  border="0" cellspacing="1" cellpadding="1">
                        <tr>
                          <td bgcolor="#CCCCCC"><table width="100%"  border="0">
                              <tr>
                                <td width="16%">&nbsp;</td>
                                <td width="28%">EJB2/EJB3</td>
                                <td width="29%">Spring Framework </td>
                                <td width="27%">Jdon Framework </td>
                              </tr>
                              <tr bgcolor="#FFFFFF">
                                <td align="center" bgcolor="#999999"> loose coupling </td>
                                <td>EJB3 supports Application POJO</td>
                                <td> supports Application POJO，but the framework
                                  itself is not managed in a ioc.</td>
                                <td>supports Application POJO，and the framework
                                itself is  managed in a ioc.</td>
                              </tr>
                              <tr bgcolor="#FFFFFF">
                                <td align="center" bgcolor="#999999">full-stack</td>
                                <td>more full-stack</td>
                                <td>full-stack</td>
                                <td>less full-stack</td>
                              </tr>
                              <tr bgcolor="#FFFFFF">
                                <td align="center" bgcolor="#999999">stand-alone<br>                                  </td>
                                <td>no location transparency<br>
                                performance trap </td>
                                <td>location transparency</td>
                                <td>location transparency, and the performance
                                  of the framework's components are optimized.excellent
                                  stand-alone performance. </td>
                              </tr>
                              <tr bgcolor="#FFFFFF">
                                <td align="center" bgcolor="#999999">scalablity</td>
                                <td><p>supports cluster.</p></td>
                                <td>not supports cluster, but can support EJB, </td>
                                <td>not supports cluster,but can be a proxy of
                                EJB. </td>
                              </tr>
                              <tr bgcolor="#FFFFFF">
                                <td align="center" bgcolor="#999999">RAD Tool </td>
                                <td>need business IDE Tool </td>
                                <td>autowiring is not default core function,
                                  when there are hundreds of beans, many time
                                  will spent on taking care of their invocation
                                  relations. </td>
                                <td>simple but powerful, support core autowiring,
                                  donot take care of the beans invovation relations. </td>
                              </tr>
                              <tr bgcolor="#FFFFFF">
                                <td align="center" bgcolor="#999999">system</td>
                                <td>large system or medium system. </td>
                                <td>medium and small system </td>
                                <td>small and medium system</td>
                              </tr>
                              <tr bgcolor="#FFFFFF">
                                <td align="center" bgcolor="#999999">weight<br>
                                lightweight</td>
                                <td>weight,but banting.</td>
                                <td>lightweight, but maybe being fat </td>
                                <td>lightweight, always simple but quick and
                                  powerful </td>
                              </tr>
                          </table></td>
                        </tr>
                  </table>
                      <h2><strong>Comparison with Ruby on Rails </strong></h2>
                      <p class="style2"><img src="http://www.jdon.com/jdonframework/images/ror.jpg" width="565" height="252" alt="ror"></p>
                      <h2><strong>Domain Driven Development </strong></h2>
                      <p>　　When we develop a J2EE application with Jdon Framework,at first we must finish domain object 's design, and then  copy the domain object(Model) to presentation layer's ModelForm, and persistence Model in Hibernate/iBatis. Boundary Object = Domain Object = Entity Object(BO).</p>
                   
                  <h3>Less and simple confuration: </h3>
                  <P class="style2">　　The configuration of jdon Framework is simple, <a href="http://www.jdon.com/jdonframework.dtd" target="_blank">this</a> is the XML DTD, you will find the schemal is very simple, the amount of the schemal is less. <br>
                    　　There are two parts in XML jdonframework.xml: models and services, services part is basic configure, it looks like: &lt;pojoService name=&quot;XXX&quot;  class=&quot;xx.xxx.xx&quot; /&gt;, models part is for CRUD as below. <br>　                    </P>
                  <h3><strong>CRUD(Create/Read/Update/Delete)</strong></h3>
                  <P>　　In Jdon Framework, Business logic can be done in service layer,  by below configure xml(such as jdonframework.xml), we can kick off controller layer, the C of MVC is done by configures:</P>
                  <P class="style2"><FONT face=arial,sans-serif color=#000000>&lt;app&gt;<br>
                    &lt;models&gt;<br>
                    &lt;model key="username" <B>class</B>=</FONT><FONT 
color=#00bb00>"com.jdon.framework.samples.jpetstore.domain.Account"</FONT><FONT 
color=black>&gt;<BR>
                    　　&lt;actionForm name=</FONT><FONT 
color=#00bb00>"accountForm"</FONT><FONT color=black>/&gt; </FONT><FONT 
color=#0000aa>//Boundary Object </FONT><FONT 
color=black><BR>
                      　　&lt;handler&gt;<BR>
                      　　　　&lt;service ref=</FONT><FONT 
color=#00bb00>"accountService"</FONT><FONT color=black>&gt; </FONT><FONT 
color=#0000aa>/Business Logic Service Component</FONT><FONT color=black><BR>
                        　　　　　　&lt;getMethod name=</FONT><FONT color=#00bb00>"getAccount"</FONT><FONT 
color=black>/&gt;  <FONT 
color=#0000aa>//read Method of the Service</FONT><BR>
                          　　　　　　&lt;createMethod name=</FONT><FONT 
color=#00bb00>"insertAccount"</FONT><FONT color=black>/&gt; </FONT><FONT 
color=#0000aa>//Create Method of the Service </FONT><FONT color=black><BR>
                            　　　　　　&lt;updateMethod name=</FONT><FONT color=#00bb00>"updateAccount"</FONT><FONT color=black>/&gt; </FONT><FONT color=#0000aa>/Update Method of the Service </FONT><FONT 
color=black><BR>
                              　　　　　　&lt;deleteMethod name=</FONT><FONT 
color=#00bb00>"deleteAccount"</FONT><FONT 
color=black>/&gt;<FONT 
color=#0000aa>//delete Method of the Service</FONT><BR>
                                　　　　&lt;/service&gt;<BR>
                                　　&lt;/handler&gt;<BR>
  &lt;/model&gt;<br>
  </FONT><FONT face=arial,sans-serif color=#000000>&lt;/models&gt;</FONT><FONT 
color=black><br>
  &lt;services&gt;<br>
  .......</FONT><FONT 
color=black><br>
&lt;/services&gt;<br>
                    </FONT>&lt;/app&gt;</P>
                  <h3>Command patern for calling services</h3>
                  <P class="style2">　　Like the ActionController of Ruby on Rails, t he function/pattern  handles incoming requests from the user's browser and routes   them to the correct method of a <strong>service</strong> class , not a controller class such as Struts's DispatchAction. click <a href="command.html" target="_blank">here for details</a>. </P>
                  <h3><strong>POJO Services  and IOC  </strong></h3>
                  <div v:shape="_x0000_s1026" class=O>
                    <div style='mso-line-spacing:"80 20 0";mso-margin-left-alt:216;mso-char-wrap:
1;mso-kinsoku-overflow:1'>
                      <p>consider below code: </p>
                      <span style='mso-special-format:bullet;color:#FF6600;
mso-color-index:7;position:absolute;left:-5.47%;font-family:Wingdings'>§</span><span
lang=EN-IE style='mso-fareast-font-family:宋体;mso-hansi-font-family:Arial;
mso-fareast-language:ZH-CN'>package test;&#13;</span></div>
                    <div style='mso-line-spacing:"80 20 0";mso-margin-left-alt:216;mso-char-wrap:
1;mso-kinsoku-overflow:1'><span style='mso-special-format:bullet;color:#FF6600;
mso-color-index:7;position:absolute;left:-5.47%;font-family:Wingdings'>§</span><span
lang=EN-IE style='mso-fareast-font-family:宋体;mso-hansi-font-family:Arial;
mso-fareast-language:ZH-CN'><span style='mso-spacerun:yes'> </span>public class BServiceImp implements BService{<span style='mso-spacerun:yes'>    </span>&#13;</span></div>
                    <div style='mso-line-spacing:"80 20 0";mso-margin-left-alt:216;mso-char-wrap:
1;mso-kinsoku-overflow:1'><span style='mso-special-format:bullet;color:#FF6600;
mso-color-index:7;position:absolute;left:-5.47%;font-family:Wingdings'>§</span><span
lang=EN-IE style='mso-fareast-font-family:宋体;mso-hansi-font-family:Arial;
mso-fareast-language:ZH-CN'><span style='mso-spacerun:yes'>          </span>AService a;&#13;</span></div>
                    <div style='mso-line-spacing:"80 20 0";mso-margin-left-alt:216;mso-char-wrap:
1;mso-kinsoku-overflow:1'><span style='mso-special-format:bullet;color:#FF6600;
mso-color-index:7;position:absolute;left:-5.47%;font-family:Wingdings'>§</span><span
lang=EN-IE style='mso-fareast-font-family:宋体;mso-hansi-font-family:Arial;
mso-fareast-language:ZH-CN'><span style='mso-special-format:bullet;color:#FF6600;
mso-color-index:7;position:absolute;left:-5.47%;font-family:Wingdings'>§</span><span
lang=EN-IE style='mso-fareast-font-family:宋体;mso-hansi-font-family:Arial;
mso-fareast-language:ZH-CN'><span style='mso-spacerun:yes'>         </span></span>public B(AService a){<span style='mso-spacerun:yes'>  </span>&#13;</span></div>
                    <div style='mso-line-spacing:"80 20 0";mso-margin-left-alt:216;mso-char-wrap:
1;mso-kinsoku-overflow:1'><span style='mso-special-format:bullet;color:#FF6600;
mso-color-index:7;position:absolute;left:-5.47%;font-family:Wingdings'>§</span><span
lang=EN-IE style='mso-fareast-font-family:宋体;mso-hansi-font-family:Arial;
mso-fareast-language:ZH-CN'><span style='mso-special-format:bullet;color:#FF6600;
mso-color-index:7;position:absolute;left:-5.47%;font-family:Wingdings'>§</span><span
lang=EN-IE style='mso-fareast-font-family:宋体;mso-hansi-font-family:Arial;
mso-fareast-language:ZH-CN'><span style='mso-spacerun:yes'>         </span></span><span style='mso-special-format:bullet;color:#FF6600;
mso-color-index:7;position:absolute;left:-5.47%;font-family:Wingdings'>§</span><span
lang=EN-IE style='mso-fareast-font-family:宋体;mso-hansi-font-family:Arial;
mso-fareast-language:ZH-CN'><span style='mso-spacerun:yes'>         </span></span>this.a = a&#13;</span></div>
                    <div style='mso-line-spacing:"80 20 0";mso-margin-left-alt:216;mso-char-wrap:
1;mso-kinsoku-overflow:1'><span style='mso-special-format:bullet;color:#FF6600;
mso-color-index:7;position:absolute;left:-5.47%;font-family:Wingdings'>§</span><span
lang=EN-IE style='mso-fareast-font-family:宋体;mso-hansi-font-family:Arial;
mso-fareast-language:ZH-CN'><span style='mso-spacerun:yes'><span style='mso-special-format:bullet;color:#FF6600;
mso-color-index:7;position:absolute;left:-5.47%;font-family:Wingdings'>§</span><span
lang=EN-IE style='mso-fareast-font-family:宋体;mso-hansi-font-family:Arial;
mso-fareast-language:ZH-CN'>         </span></span>}&#13;</span></div>
                    <div style='mso-line-spacing:"80 20 0";mso-margin-left-alt:216;mso-char-wrap:
1;mso-kinsoku-overflow:1'><span style='mso-special-format:bullet;color:#FF6600;
mso-color-index:7;position:absolute;left:-5.47%;font-family:Wingdings'>§</span><span
lang=EN-IE style='mso-fareast-font-family:宋体;mso-hansi-font-family:Arial;
mso-fareast-language:ZH-CN'><span style='mso-spacerun:yes'>          </span>public void invoke(){&#13;</span></div>
                    <div style='mso-line-spacing:"80 20 0";mso-margin-left-alt:216;mso-char-wrap:
1;mso-kinsoku-overflow:1'><span style='mso-special-format:bullet;color:#FF6600;
mso-color-index:7;position:absolute;left:-5.47%;font-family:Wingdings'>§</span><span
lang=EN-IE style='mso-fareast-font-family:宋体;mso-hansi-font-family:Arial;
mso-fareast-language:ZH-CN'><span style='mso-spacerun:yes'>                </span>a.myMethod();&#13;</span></div>
                    <div style='mso-line-spacing:"80 20 0";mso-margin-left-alt:216;mso-char-wrap:
1;mso-kinsoku-overflow:1'><span style='mso-special-format:bullet;color:#FF6600;
mso-color-index:7;position:absolute;left:-5.47%;font-family:Wingdings'>§</span><span
lang=EN-IE style='mso-fareast-font-family:宋体;mso-hansi-font-family:Arial;
mso-fareast-language:ZH-CN'><span style='mso-spacerun:yes'>          </span>}&#13;</span></div>
                    <div style='mso-line-spacing:"80 20 0";mso-margin-left-alt:216;mso-char-wrap:
1;mso-kinsoku-overflow:1'><span style='mso-special-format:bullet;color:#FF6600;
mso-color-index:7;position:absolute;left:-5.47%;font-family:Wingdings'>§</span><span
lang=EN-IE style='mso-fareast-font-family:宋体;mso-hansi-font-family:Arial;
mso-fareast-language:ZH-CN'><span style='mso-spacerun:yes'> </span>}&#13;</span></div>
                    <div style='mso-line-spacing:"80 20 0";mso-margin-left-alt:216;mso-char-wrap:
1;mso-kinsoku-overflow:1'>
                      <p>　　There are two way for invoking B:</p>
                      <p>　　Ordinarily way without ioc container: <br>
                        <span style="mso-fareast-font-family:宋体;mso-hansi-font-family:Arial;
mso-fareast-language:ZH-CN">　　BService</span> b = new <span style="mso-fareast-font-family:宋体;mso-hansi-font-family:Arial;
mso-fareast-language:ZH-CN">BService</span>Imp(<strong>new <span style="mso-fareast-font-family:宋体;mso-hansi-font-family:Arial;
mso-fareast-language:ZH-CN">AService</span>Imp()</strong>);<br>
                        　　b. invoke();</p>
                      <p>　　Revolution way with jdon ioc container：<br>
                        <span style="mso-fareast-font-family:宋体;mso-hansi-font-family:Arial;
mso-fareast-language:ZH-CN">　　<strong>BService</strong></span><strong> b = (BService) WebAppUtil.getService(“bservice”);<br>
                        　　b. invoke();</strong><br>
                        <br>
                        　　Now There is only one A class in B class code, if there are more other classes such as C/D/E... , when we create B instance, we must spend more energy in creating those instances of A/C/D or E ..</p>
                      <p>　　but, with jdon ioc container, we don't need do these
                        stupid works any more. when we need use any class, we
                        can only fetch it and use it.</p>
                      <p>　　certainly, at first we must configure all these class in jdonframework.xml:</p>
                      <p>&lt;app&gt;<br>
                          <FONT 
color=black>　　</FONT>&lt;models&gt;<br>
                             <FONT 
color=black>　　</FONT><FONT 
color=black>　　</FONT>.....<br>
                            <FONT 
color=black>　　</FONT>&lt;/models&gt;<br>
                        <FONT 
color=black>　　</FONT>&lt;services&gt;<br>
                        <FONT 
color=black>　　</FONT><FONT 
color=black>　　</FONT>&lt;pojoService name=&quot;<span style="mso-fareast-font-family:宋体;mso-hansi-font-family:Arial;
mso-fareast-language:ZH-CN"><strong>bservice</strong></span>&quot; class=&quot;test.<span style="mso-fareast-font-family:宋体;mso-hansi-font-family:Arial;
mso-fareast-language:ZH-CN">BServiceImp</span>&quot;/&gt;<br>
                        <FONT 
color=black>　　</FONT><FONT 
color=black>　　</FONT>&lt;pojoService name=&quot;<span style="mso-fareast-font-family:宋体;mso-hansi-font-family:Arial;
mso-fareast-language:ZH-CN">aservice</span>&quot; class=&quot;test.<span style="mso-fareast-font-family:宋体;mso-hansi-font-family:Arial;
mso-fareast-language:ZH-CN">AServiceImp</span>&quot;/&gt;<br>
                        <FONT 
color=black>　　</FONT><FONT 
color=black>　　</FONT>&lt;pojoService name=&quot;cservice&quot; class=&quot;test.C<span style="mso-fareast-font-family:宋体;mso-hansi-font-family:Arial;
mso-fareast-language:ZH-CN">ServiceImp</span>&quot;/&gt;<br>
                        <FONT 
color=black>　　</FONT>&lt;/services&gt;<br>
&lt;/app&gt;</p>
                      <p>　　in configure xml, we don't need take care of the relations
                        B with A/C/D, this is important difference from Spring,
                        in Spring configure file, we need add &quot;ref local=a&quot; ,
                        at this point, Jdon is like HiveMind. </p>
                      <h3>Filter and AOP Interceptor</h3>
                      <p>　　Permission and cache can be the Interceptors for the application , here is a sample, in myaspect.xml: </p>
                      <p>&lt;aspect&gt;</p>
                      <p> 　　&lt;interceptor name=&quot;jivejdon_permissionInterceptor&quot; 　　　　　　class=&quot;com.jdon.jivejdon.service.interceptor.PermissionInterceptor&quot;<br>
                        　　　　　　                        pointcut=&quot;pojoServices&quot; /&gt;<br>
                          <br>
                        &lt;/aspect&gt;</p>
                      <p>　　in web.xml we need tell  jdon framework the interceptors configuration:</p>
                      <p>&lt;web-app&gt;<br>
                        　　&lt;context-param&gt;<br>
　　　　&lt;param-name&gt;aspectConfigure&lt;/param-name&gt;<br>
　　　　&lt;param-value&gt;WEB-INF/myaspect.xml&lt;/param-value&gt;<br>
　　&lt;/context-param&gt; <br>
                      &lt;/web-app&gt;</p>
                      <p>　　all configurations can be found in jdon framework's examples.  </p>
                    </div>
                  </div>
                  <h3><strong>JdonFramework architecture</strong></h3>
                  <p align="center"><img src="images/architecture2.jpg" width="514" height="276"> </p>
                  <p align="center"><img src="images/architecture.gif" width="400" height="310"></p>
                  <p align="left">　　JdonFramework in J2EE Application Architecture:</p>
                  <p align="center">&nbsp;</p>
                  <p align="center"><img src="images/architecture.jpg" width="500" height="406"></p>
                  <p><strong>EJB PROXY </strong> </p>
                  <p>if you like EJB, Session Beans can work seamlessly with
                    POJO services in one JavaEE system.</p>
                  <P>When your system grows, you can pack the POJO service
                    with Session Beans, so you JavaEE become a EJB system with
                    cluster computering. all these upgrade works don't affect
                    the presentation code, only need change the jdonframework.xml.</P>
                  <P>When you use session beans, Jdon become a invocation proxy,
                    it only intercepte the invocation from presentation lay,
                    and then transfer to EJB container, Jdon's container only
                    affect the POJO services.</P>
                  <P>　　now chinese document is available: <a href="http://www.jdon.com/jdonframework/JdonFramework.pdf">click here </a></P>
                  <p>　　welcome you join our english document team. </p>
                  <p align="center">&nbsp;</p>
                  <p>&nbsp;</p>
                  <!-- #EndEditable -->
			    </td>
              </tr>
            </table>			
          </td>
		  <td width="200" valign="top"  bgcolor="#FFFFD7"> <table width="100%" border="0" cellspacing="0" cellpadding="3" height="200" align="center">
      <tr>
        <td align="right"><table width="100%" height="200" border="0" align="center" cellpadding="3" cellspacing="0" dwcopytype="CopyTableCell">
            <tr>
              <td align="left"  valign="top"><p align="center"><a href="http://www.jdon.org"><img src="images/jdone.gif" width="120" height="60" border="0"></a></p>
                  <p ><B><a href="https://sourceforge.net/projects/jdon/files/" target="_blank">Downloads</a></B></p>
                  <p ><a href="http://www.slideshare.net/banq/ddd-framework-for-java-jdonframework-2881760"><strong>Architecture</strong></a></p>
                  <p ><B><a href="doc.htm" target="_blank">Document</a></B></p>
                  <p ><a href="quickconf.html"><strong>Qucik Start</strong></a> </p>
                  <p ><a href="steps.html"><strong>Step By Step</strong></a> </p>
                 
                  <p ><a href="struts_jdon_jdbc.html"><strong>Sample Application</strong></a> </p>
                  <p ><B><a href="http://sourceforge.net/projects/jdon/files/JdonFramework-App/" target="_blank">Samples Download</a></B></p>
                  <p ><B><a href="http://www.jdon.com/testWeb/" target="_blank">Online Demo</a></B></p>
                  <p ><a href="api/index.html" target="_blank"><strong>API</strong></a><B><a href="http://sourceforge.net/projects/jdon/support" target="_blank"><br>
                        <br>
                        Support</a></B></p>
                  <p ><a href="cn/jdonframework/" target="_blank"><strong>Chinese Site</strong></a> </p>
                  <p ><a href="http://sourceforge.net/projects/jdon/"><img src="images/sf.gif" alt="sf" width="88" height="31" border="0"></a></p>
                  <!-- InstanceBeginEditable name="Menu" --> <!-- InstanceEndEditable --> </td>
            </tr>
        </table></td>
        </tr>
      </table>
   </td>
      </tr>
    </table></td>
  </tr>
</table>


<table width="100%" border="0" cellspacing="0" cellpadding="0" height="2" bgcolor="#000000"  align="center">
              <tr>
                <td></td>
              </tr>
</table>
<table width="100%" border="0" cellspacing="0" cellpadding="0" align="center">
<tr><td height="20" bgcolor="#CAC9BB" align="center">
  <p><span class="small"><font color="#555555"><br>
  </font></span></p>
  </td>
</tr>
</table>
<br>
<!-- InstanceBeginEditable name="EditRegion3" --><!-- InstanceEndEditable -->
</body>
<!-- InstanceEnd --></html>

 IOC + OSGI + REST + 异步HTTP
 
框架内部：
1. 将资源或服务以URI为名称注册到OSGI中。 
2. 注册URI资源之前，首先要注册异步Http服务，可以挑选MINO xHttp等。
3. 注册总类如下，将上述两个组件注册到OSGI中，同时使用IOC依赖注射解决资源类之间的依赖。

public class Activator implements BundleActivator
{
public void start(BundleContext context) throws Exception
{
ServiceReference sRef = context.getServiceReference(RESTService.class.getName());
if (sRef != null)
{
RESTService service = (RESTService) context.getService(sRef);
//向OSGI注册一个资源，通过IOC依赖注射解决MyResource对其他类XXX的依赖
service.registerResource("/resource", new MyResource(XXX), null, null);
}
}

public void stop(BundleContext context) throws Exception
{
ServiceReference sRef = context.getServiceReference(RESTService.class.getName());
if (sRef != null)
{
RESTService service = (RESTService) context.getService(sRef);
service.unregister("/resource");
}
}
}


上述注册在框架被使用时，可以通过XML配置或Annotation实现：
<services>
<service name="/resource" class="xxx.MyResource.class"/>
</services>


@GET
@Resource("/resource")
Class MyResource{

...
}


客户端调用方式：
1.另外一个JVM或远程通过REST方式调用
http://localhost:8080/resource

2.同一个JVM中不同Bundle模块之间使用OSGI方式调用：
ServiceReference ref = bundleContext.getServiceReference("/resource");
try {
MyResource myResource = (MyResource) bundleContext.getService(ref); 
... 
} finally {
bundleContext.ungetService(ref);
}

3.同一个Bundle模块中以IOC依赖注射调用。

调用方式的粒度是不断从小到大，当然比REST更粗粒度的是SOA Web方式方式。提供各种粒度的对外开放接口，我相信这应该是未来轻量框架的一个目标。
